enregistreChemin = "clusteringTemp.RData", ...) {
critere <- as.numeric(levels(jeuDonnees$depression))[jeuDonnees$depression]
jdAPatitionner <- switch(type,
SchizophrenesVsDepressifsSansAutresP = jeuDonnees[critere >= 2, 7:32],
SchizophrenesVsDepressifsAvecAutresP = jeuDonnees[critere >= 1, 7:32],
tout = jeuDonnees[7:32],
stop('Objectif du clustering non-reconnaissable. ')
)
clus <- fonction(x = jdAPatitionner, centers = nbClasses, ...)
## print(clus$cluster)
resultat <- clus$cluster + 1
if (type == "SchizophrenesVsDepressifsAvecAutresP") {
resultatPart <- resultat[critere >= 2]
} else if (type == "SchizophrenesVsDepressifsSansAutresP")
resultatPart <- resultat
correcte <- resultatPart == with(jeuDonnees, depression[critere >= 2])
nbVrais <- sum(correcte)
print(nbVrais)
nbFaux <- sum(critere >= 2) - nbVrais
print(nbFaux)
if (nbVrais < nbFaux) {
clus$cluster <- ifelse (clus$cluster == 1, 2, 1)
nbFaux <- nbVrais
}
print(nbFaux)
couleursClasses <- if(type == "SchizophrenesVsDepressifsAvecAutresP") {
factor(c(clus$cluster, rep(-1, times = 71)) * (sujets$depression != 1) + 1, ordered = TRUE)
} else if (type == "SchizophrenesVsDepressifsSansAutresP") {
prediClasse <- critere
prediClasse[prediClasse >= 2] <- clus$cluster + 1
factor(prediClasse, ordered = TRUE)
}
plot3DClustering <- plot_ly(jeuDonnees, x = ~PC1, y = ~PC2, z = ~PC3, color = couleursClasses,
colors = couleurs1,
hoverinfo = 'text', text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = paste(titre, type))
save(plot3DClustering, file = enregistreChemin)
return(list(clus = clus, nbFaux = nbFaux))
}
?kmeans
kmclusPT <- kmeans(x = sujets[7:32], 2, nstart = 20)
resulkmPT <- kmclusPT$cluster
resulkmPT
kmclusPT <- kmeans(x = sujets[7:32], 2, nstart = 30)
resulkmPT <- kmclusPT$cluster
resulkmPT
sujets[[2]]
kmoyclusPT <- kmeans(x = sujets[7:32], 2, nstart = 30)
resulkmoyPT <- kmoyclusPT$cluster
kmoyclusPT <- kmeans(x = sujets[7:32], 2, nstart = 30)
plot3DkmoyclusPT <- plot_ly(jeuDonnees, x = ~PC1, y = ~PC2, z = ~PC3, color = kmoyclusPT$cluster,
colors = couleurs[c(11,2)],
hoverinfo = 'text', text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering en 2 sous-groupes de la totalité des sujets")
plot3DkmoyclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = kmoyclusPT$cluster,
colors = couleurs[c(11,2)],
hoverinfo = 'text', text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering en 2 sous-groupes de la totalité des sujets")
save(plot3DkmoyclusPT, file = "plot3DkmoyclusPT.RData")
plot3DkmoyclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusPT$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text', text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering en 2 sous-groupes de la totalité des sujets")
save(plot3DkmoyclusPT, file = "plot3DkmoyclusPT.RData")
plot3DkmoyclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusPT$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nN. Vraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering en 2 sous-groupes de la totalité des sujets")
save(plot3DkmoyclusPT, file = "plot3DkmoyclusPT.RData")
hclusPT <- hclust(dist(patients[patients$depression %in% c("schizophrene", "depressif"), 7:32]), method = "complete")
plot3DkmoyclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPT$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
save(plot3DkmoyclusPT, file = "plot3DhclusPT.RData")
save(plot3DhclusPT, file = "plot3DhclusPT.RData")
plot3DkhclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPT$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
save(plot3DhclusPT, file = "plot3DhclusPT.RData")
plot3DhclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPT$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
save(plot3DhclusPT, file = "plot3DhclusPT.RData")
hclusPT
hclusPT$labels
hclusPT$labels
summary(hclusPT)
hclusPTmembre <- cutree(hclusPT, h = -1)
hclusPTmembre
hclusPTmembre <- cutree(hclusPT, k = é)
hclusPTmembre <- cutree(hclusPT, k = 2)
hclusPTmembre
hclusPT <- hclust(dist(patients[7:32]), method = "complete")
hclusPTmembre <- cutree(hclusPT, k = 2)
hclusPTmembre
plot3DhclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPTmembre$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
plot3DhclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPTmembre),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
save(plot3DhclusPT, file = "plot3DhclusPT.RData")
hclusPT <- hclust(dist(sujets[7:32]), method = "complete")
hclusPTmembre <- cutree(hclusPT, k = 2)
hclusPTmembre
plot3DhclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPTmembre),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
save(plot3DhclusPT, file = "plot3DhclusPT.RData")
plot3DhclusPT <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusPTmembre),
colors = couleurs[c(2,11)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes de la totalité des sujets")
save(plot3DhclusPT, file = "plot3DhclusPT.RData")
head(patients)
kmoyclusSD <- kmeans(x = patients[patients$depression %in% c("schizophrene", "depressif"), 7:32], 2, nstart = 30)
kmoyclusSD
plot3DkmoyclusSD <- plot_ly(patients[patients$depression %in% c("schizophrene", "depressif"), 7:32],
x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSD$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
kmoyclusSD <- kmeans(x = sujets[sujets$depression %in% c("schizophrene", "depressif"), 7:32], 2, nstart = 30)
plot3DkmoyclusSD <- plot_ly(sujets[sujets$depression %in% c("schizophrene", "depressif"), 7:32],
x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSD$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
plot3DkmoyclusSD <- plot_ly(sujets[sujets$depression %in% c("schizophrene", "depressif"), ],
x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSD$cluster),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
rep(0, 3)[2]
rep(0, 3)[2] <- 1
kmoyclusSDmembre <- rep(0, nrows(sujets))
kmoyclusSDmembre <- rep(0, nrow(sujets))
kmoyclusSDmembre
kmoyclusSDmembre[sujets$depression %in% c("schizophrene", "depressif")] <- kmoyclusSD$cluster
kmoyclusSDmembre
plot3DkmoyclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSDmembre),
colors = couleurs[c(11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
couleurs
plot3DkmoyclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSDmembre),
colors = couleurs[c(5,11,2)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
patient))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
plot3DkmoyclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSDmembre),
colors = c("white", couleurs[c(2,11)]),
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
depression))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
plot3DkmoyclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSDmembre),
colors = couleurs[c(5,2,11)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
depression))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
plot3DkmoyclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSDmembre),
colors = couleurs[c(5,2,3)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
depression))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
plot3DkmoyclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(kmoyclusSDmembre),
colors = couleurs[c(6,2,4)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
depression))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering k-moyennes en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DkmoyclusSD, file = "plot3DkmoyclusSD.RData")
hclusSD <- hclust(dist(sujets[sujets$depression %in% c("schizophrene", "depressif"), 7:32]), method = "complete")
hclusSDmembre <- rep(0, nrow(sujets))
hclusSDmembre[sujets$depression %in% c("schizophrene", "depressif")] <- hclusSD$cluster
hclusSDmembre[sujets$depression %in% c("schizophrene", "depressif")] <- cutree(hclusSD, k = 2)
hclusSDmembre
plot3DhclusSD <- plot_ly(sujets, x = ~PC1, y = ~PC2, z = ~PC3, color = as.factor(hclusSDmembre),
colors = couleurs[c(6,2,4)],
hoverinfo = 'text',
text = ~paste("No. de patient : ", N., "\nN. de oui : ", de.oui, "\nVraie classe : ",
depression))  %>%
add_markers() %>% layout(scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')),
title = "Clustering hiérarchique en 2 sous-groupes des schizophrènes et des dépressifs")
save(plot3DhclusSD, file = "plot3DhclusSD.RData")
getwd()
library(foreign)
setwd("C:/Users/ellie/Documents/R/OpticalBurstSwitching")
OBS <- read.arff("OBS-Network-DataSet_2_Aug27.arff")
head(OBS)
dim(OBS)
summary(OBS) # On voit que la variable "Packet.Size_Byte" est complètement inutile car elle ne change jamais. On va la virer.
summary(OBS$`Packet Size_Byte`)
OBS <- OBS[names(OBS) != "Packet Size_Byte"]
names(OBS)
names(OBS) <- make.names(names(OBS), unique = TRUE)
valMan <- which(is.na(OBS), arr.ind = TRUE, useNames = TRUE)
dim(valMan) # Only 15 * 2 so we don't have to draw it.
OBScomplet <- knnImputation(OBS[! names(OBS) %in% c("Node.Status", "Class")])
library(DMwR)
OBScomplet <- knnImputation(OBS[! names(OBS) %in% c("Node.Status", "Class")])
OBScomplet[valMan]
OBScomplet
library(plotly)
corOBS <- cor(OBScomplet[! names(OBScomplet) %in% c("Node.Status", "Class")])
corHmp <- plot_ly(x = names(OBScomplet[! names(OBScomplet) %in% c("Node Status", "Class")]),
y = names(OBScomplet[! names(OBScomplet) %in% c("Node Status", "Class")]), z = corOBS, type = "heatmap")
corHmp
library("factoextra")
pcaOBS <- prcomp(OBScomplet[! names(OBScomplet) %in% c("Node.Status", "Class")], scale. = TRUE, rank. = 2)
fviz_eig(pcaOBS)
summary(pcaOBS)
fviz_pca_var(pcaOBS, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
summary(pcaOBS)
summary(pcaOBS)$cum
?summary.prcomp
summary(pcaOBS)$importance[3, ]
summary(pcaOBS)$importance[3, c(1, 2)]
pcaOBS2 <- prcomp(OBScomplet[c("Packet.Received..Rate", "Packet_Received", "Packet_Transmitted", "Packet_Lost",
"Average_Delay_Time_Per_Sec", "X10.Run.Delay", "Node", "Received_Byte", "Flood.Status")], scale. = TRUE, rank. = 2)
pcaOBS2 <- prcomp(OBScomplet[c("Packet.Received..Rate", "Packet_Received", "Packet_Transmitted", "Packet_lost",
"Average_Delay_Time_Per_Sec", "X10.Run.Delay", "Node", "Received_Byte", "Flood.Status")], scale. = TRUE, rank. = 2)
summary(pcaOBS)$importance[3, c(1, 2)]
summary(pcaOBS2)$importance[3, c(1, 2)]
summary(pcaOBS2)$importance[3, c(1, 2, 3)]
fviz_pca_var(pcaOBS2, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
summary(OBS$Flood.Status)
table(OBS$Flood.Status)
?fviz_eig
pcaOBS2 <- prcomp(OBScomplet[c("Packet.Received..Rate", "Packet_Received", "Packet_Transmitted", "Packet_lost",
"Average_Delay_Time_Per_Sec", "X10.Run.Delay", "Node", "Received_Byte", "Flood.Status")], scale. = TRUE, rank. = 3)
summary(pcaOBS2)$importance[3, c(1, 2, 3)]
fviz_eig(pcaOBS, ncp = 3)
fviz_pca_var(pcaOBS2, col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE)
fviz_eig(pcaOBS, ncp = 3, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(pcaOBS, ncp = 3, addlabels = TRUE, ylim = c(0, 70))
fviz_eig(pcaOBS, ncp = 3, addlabels = TRUE, ylim = c(0, 60))
pcaOBS2$var$coord
variables <- get_pca_var(pcaOBS2)$coord
variables
variables <- get_pca_var(pcaOBS2)
dim(variables$coord)
head(variables$coord)
variables$coord[, 3]
variables$coord[, 1:3]
variables$cos2[, 1:2]
library("corrplot")
install.packages("corrplot")
fviz_cos2(pcaOBS2, choice = "var", axes = 1:2)
corrplot(variables$cos2, is.corr=FALSE)
library("corrplot")
corrplot(variables$cos2, is.corr=FALSE)
corrplot(variables$cos2[, 1:2], is.corr=FALSE)
corrplot(variables$cos2[, 1:2], is.corr=TRUE)
variables$contrib[, 1:3]
corrplot(var$contrib[, 1:3], is.corr=FALSE)
corrplot(variables$contrib[, 1:3], is.corr=FALSE)
fviz_contrib(pcaOBS2, choice = "var", axes = 1)
oldPar <- par(mfrow = c(1, 2))
fviz_contrib(pcaOBS2, choice = "var", axes = 1)
fviz_contrib(pcaOBS2, choice = "var", axes = 2)
oldPar <- par(mfrow = c(1, 2))
oldPar
fviz_contrib(pcaOBS2, choice = "var", axes = 1)
fviz_contrib(pcaOBS2, choice = "var", axes = 2)
fviz_contrib(pcaOBS2, choice = "var", axes = 1:2)
?fviz_pca_ind
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, select.var = list(contrib = 5))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, select.ind = list(contrib = 5))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, select.ind = list(contrib = 50))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE, select.ind = list(contrib = 500))
sample.int(n = 500, size = 10)
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = sample.int(n = length(pcaOBS2), size = 20))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = sample.int(n = nrow(pcaOBS2), size = 20))
sample.int(n = nrow(pcaOBS2), size = 20)
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = sample.int(n = nrow(OBS2), size = 20))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = sample.int(n = nrow(OBS), size = 20))
sample.int(n = nrow(OBS), size = 20)
head(OBS, 1)
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = list(sample.int(n = nrow(OBS), size = 20)))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = list(name = sample.int(n = nrow(OBS), size = 20)))
fviz_pca_ind(pcaOBS2, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = list(name = sample.int(n = nrow(OBS), size = 20)))
fviz_pca_ind(pcaOBS, col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = list(name = sample.int(n = nrow(OBS), size = 20)))
nrow(OBS)
fviz_pca_ind(pcaOBS2, col.ind = "cos2", gradient.cols = "RdBu", repel = TRUE,
select.ind = list(name = sample.int(n = nrow(OBS), size = 20)))
fviz_pca_ind(pcaOBS2, col.ind = OBS$Node.Status, gradient.cols = "RdBu", repel = TRUE,
select.ind = list(name = sample.int(n = nrow(OBS), size = 60)), addEllipses = TRUE, legend.title = "Node Status")
class(OBS$Node.Status)
levels(OBS$Node.Status)
echantillon <- sample.int(n = nrow(OBS), size = 60)
fviz_pca_ind(pcaOBS2, col.ind = OBS$Node.Status[echantillon, ], gradient.cols = "RdBu", repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, col.ind = OBS$Node.Status[echantillon], gradient.cols = "RdBu", repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
class(OBS$Node.Status[echantillon])
OBS$Node.Status[echantillon]
fviz_pca_ind(pcaOBS2, col.ind = OBS$Node.Status[echantillon], gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon], gradient.cols = "RdBu", repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon], gradient.cols = "RdBu",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status, gradient.cols = "RdBu", repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  palette = c("#00AFBB", "#E7B800", "#FC4E07"),, repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  palette = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE,
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
length(OBS$Node.Status[echantillon])
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  #palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", # col.ind = OBS$Node.Status[echantillon],  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", # col.ind = OBS$Node.Status[echantillon],  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status", repel = TRUE)
OBS$Node.Status[echantillon]
length(OBS$Node.Status[echantillon])
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
length(list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = echantillon, addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = list(OBS$Node.Status[echantillon]),  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = 20)
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
OBS$Node.Status[echantillon],
OBS$Node.Status[echantillon]
fviz_pca_ind(pcaOBS2, geom.ind = "point", # col.ind = OBS$Node.Status[echantillon],  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status[echantillon],  # palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = OBS$Node.Status, palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = factor(OBS$Node.Status), palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", col.ind = list(OBS$Node.Status), palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status[echantillon],  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = 60)
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = 100)
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = "RdBu",#c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = c("#00AFBB", "#E7B800", "#FC4E07"),
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = 200)
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = 500)
fviz_pca_ind(pcaOBS2, geom.ind = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS, geom.ind = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = 500)
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
echantillon <- sample.int(n = nrow(OBS), size = nrow(OBS))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = TRUE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon), addEllipses = FALSE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$CLass,  palette = "jco",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$CLass,  palette = "RdBu",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Class,  palette = "RdBu",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS, geom = "point", habillage = OBS$Class,  palette = "RdBu",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Node.Status,  palette = "jco",
addEllipses = FALSE, legend.title = "Node Status")
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Class,  palette = "RdBu",
select.ind = list(name = echantillon))
fviz_pca_ind(pcaOBS2, geom = "point", habillage = OBS$Class,  palette = "RdBu",
select.ind = list(name = echantillon), legend.title = "Class")
save.image("~/R/OpticalBurstSwitching/OBS.RData")
